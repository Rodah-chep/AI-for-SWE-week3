# -*- coding: utf-8 -*-
"""wk11-cnnOnly.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Yteof1rsZ_tquOtOwuh6BVa-UKESHyI
"""

!pip install streamlit

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import streamlit as st
from sklearn.model_selection import train_test_split

def two_split(X, y, holdout_frac=0.2, test_size=0.2, random_state=42):
  X_hold, X_rest, y_hold, y_rest = train_test_split(X, y, test_size=1-holdout_frac, random_state=random_state)
  X_train, X_test, y_train, y_test = train_test_split(X_rest, y_rest, test_size=test_size, random_state=random_state)
  return X_hold, X_train, X_test, y_hold, y_train, y_test

def report_stats(y_true, y_pred, prefix=""):
  mae=mean_absolute_error(y_true, y_pred)
  mse=mean_squared_error(y_true, y_pred)
  rsme=mse**0.5
  r2=r2_score(y_true,y_pred)
  print(f"{prefix} MAE: {mae:.2f}")
  print(f"{prefix} MSE: {mse:.2f}")
  print(f"{prefix} RSME: {rsme:.2f}")
  print(f"{prefix} R2: {r2:.2f}")
  return{"mae": mae,"mse": mse, "rsme": rsme, "r2": r2 }

(x_train, y_train), (x_test, y_test) = datasets.mnist.load_data()
x_train, x_test =x_train/ 255.0, x_test/ 255.0
x_train=x_train.reshape((x_train.shape[0], 28, 28, 1))
x_test=x_test.reshape((x_test.shape[0], 28, 28, 1))

X=tf.concat([x_train, x_test], axis=0)
y=tf.concat([y_train, y_test], axis=0)

X_hold, X_train, X_test, y_hold, y_train, y_test = two_split(X.numpy(), y.numpy(), holdout_frac=0.2, test_size=0.2, random_state=42)

class_names = ["0","1","2","3","4","5","6","7","8","9"]
plt.figure(figsize=(10,10))
for i in range(20):
  plt.subplot(5,5, i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(X_train[i])
  plt.xlabel(class_names[y_train[i]])
plt.show()

model= models.Sequential()
model.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3,3), activation="relu"))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3,3), activation="relu"))

model.summary()

model.add(layers.Flatten())
model.add(layers.Dense(64, activation="relu"))
model.add(layers.Dense(10))

model.summary()

model.compile(optimizer="adam", loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits= True), metrics=["accuracy"])
history=model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))

(x_train, y_train), (x_test, y_test) = datasets.mnist.load_data()
x_train, x_test =x_train/ 255.0, x_test/ 255.0
x_train=x_train.reshape((x_train.shape[0], 28, 28, 1))
x_test=x_test.reshape((x_test.shape[0], 28, 28, 1))

X=tf.concat([x_train, x_test], axis=0)
y=tf.concat([y_train, y_test], axis=0)

X_hold, X_train, X_test, y_hold, y_train, y_test = two_split(X.numpy(), y.numpy(), holdout_frac=0.2, test_size=0.2, random_state=42)

class_names = ["0","1","2","3","4","5","6","7","8","9"]
plt.figure(figsize=(10,10))
for i in range(20):
  plt.subplot(5,5, i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(X_train[i])
  plt.xlabel(class_names[y_train[i]])
plt.show()

model= models.Sequential()
model.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3,3), activation="relu"))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3,3), activation="relu"))

model.summary()

model.add(layers.Flatten())
model.add(layers.Dense(64, activation="relu"))
model.add(layers.Dense(10))

model.summary()

model.compile(optimizer="adam", loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits= True), metrics=["accuracy"])
history=model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))

holdout_loss, holdout_acc = model.evaluate(X_hold, y_hold, verbose=2)
print(f"Final Holdout Loss: {holdout_loss:.4f} | Accuracy: {holdout_acc:.4f}")